<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Shubham&#39;s blog</title>
<link>https://shubxam.codes/posts.html</link>
<atom:link href="https://shubxam.codes/posts.xml" rel="self" type="application/rss+xml"/>
<description>personal musings of shubham soni</description>
<generator>quarto-1.2.475</generator>
<lastBuildDate>Sat, 15 Apr 2023 18:30:00 GMT</lastBuildDate>
<item>
  <title>Mean Reversion Theory using Python</title>
  <dc:creator>Shubham Soni</dc:creator>
  <link>https://shubxam.codes/writings/2023-04-16-Mean-Reversion/index.html</link>
  <description><![CDATA[ 




<section id="mean-reversion-strategy-in-python" class="level1">
<h1>Mean Reversion Strategy in Python</h1>
<p>For a demonstration of a line plot on a polar axis, see Figure&nbsp;1.</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb1-3"></span>
<span id="cb1-4">r <span class="op" style="color: #5E5E5E;">=</span> np.arange(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="fl" style="color: #AD0000;">0.01</span>)</span>
<span id="cb1-5">theta <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">*</span> np.pi <span class="op" style="color: #5E5E5E;">*</span> r</span>
<span id="cb1-6">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(</span>
<span id="cb1-7">  subplot_kw <span class="op" style="color: #5E5E5E;">=</span> {<span class="st" style="color: #20794D;">'projection'</span>: <span class="st" style="color: #20794D;">'polar'</span>}</span>
<span id="cb1-8">)</span>
<span id="cb1-9">ax.plot(theta, r)</span>
<span id="cb1-10">ax.set_rticks([<span class="fl" style="color: #AD0000;">0.5</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="fl" style="color: #AD0000;">1.5</span>, <span class="dv" style="color: #AD0000;">2</span>])</span>
<span id="cb1-11">ax.grid(<span class="va" style="color: #111111;">True</span>)</span>
<span id="cb1-12">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div id="fig-polar" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://shubxam.codes/writings/2023-04-16-Mean-Reversion/index_files/figure-html/fig-polar-output-1.png" width="450" height="439" class="figure-img"></p>
<p></p><figcaption class="figure-caption">Figure&nbsp;1: A line plot on a polar axis</figcaption><p></p>
</figure>
</div>
</div>
</div>
</section>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Mean reversion is a popular trading strategy used in the financial market to take advantage of the tendency of an asset’s price to move back to its mean or average price over time. This strategy uses statistical analysis and mathematical models to identify opportunities to buy low and sell high, thereby maximizing profits. Python, a powerful and versatile programming language, has become the go-to tool for data analysis and computational finance due to its simplicity, speed, and a rich library of modules and packages. In this article, we will explore how to implement a mean reversion trading strategy using Python, from data collection and analysis to backtesting and execution. Whether you’re a seasoned trader or just starting out, this guide will provide you with the knowledge and skills to build and refine your own mean reversion trading strategy in Python.</p>
</section>
<section id="what-is-mean-reversion" class="level1">
<h1>What is Mean Reversion</h1>
<p>Mean reversion is a widely used trading strategy that is based on the assumption that the price of an asset will tend to move back towards its average price over time. This strategy involves buying an asset when its price is lower than its mean, and selling it when its price is higher. In this way, traders can take advantage of the market inefficiencies and generate profits. At its core, mean reversion traders look for strong price movements and then try to identify when those prices are likely to reverse. The way to apply this strategy in the market is to seek out extreme events and then bet that things will revert back to nearer the average.</p>
<section id="drawbacks-of-using-mean-reversion" class="level2">
<h2 class="anchored" data-anchor-id="drawbacks-of-using-mean-reversion">Drawbacks of using Mean Reversion</h2>
<p>Main problems that traders face when using mean reversion strategy:</p>
<ol type="1">
<li><p>If a stock is dropped for a major reason; such as a structural change or if there’s real game changing news, the chances of that stock snapping back quickly and giving you a profit is much smaller.</p></li>
<li><p>Momentum is the enemy of this strategy.</p></li>
<li><p>Strong price movements can go on for a very long time and a reversal may not occur for a long period</p></li>
<li><p>Instead of the price reversing and meeting the moving average again, often price just consolidates after a strong move and the moving catches up with the price</p></li>
</ol>
</section>
</section>
<section id="designing-the-strategy" class="level1">
<h1>Designing the Strategy</h1>
<p>In order to design our trading strategy, we will consider 200 Days moving average as the guiding principle. If we take Bharti Airtel stock (NSE:BHARTIARTL) as a reference and look at its price action over the last 1 year, we see that whenever the stock price deviates from its long-term average value, sooner or later it reverts back to the long term mean value.</p>
<p>The graph below shows the mean reversion action. Here the blue line represents daily price action and orange line represents the 200 days moving average</p>
<p>Most retail traders/investors in India do not usually short a stock simply because they do not understand the complexities associated with short selling, hence our main focus while designing this trading strategy will be on buying low and selling high.&nbsp;</p>
<p>There are numerous other ways in which mean reversion theory could be applied in trading, either independently or in conjunction with other trading strategies however since the scope of this article is limited to the introduction of Mean reversion as a trading strategy, we will keep our strategy simple.</p>
<p>Let’s understand key terminologies that we will be using in the code before we start making our trading system:</p>
<ol type="1">
<li><p>52 week low: lowest price a stock has traded at, in the past 52 weeks.</p></li>
<li><p>52 week high: The highest price a stock has traded at, in the past 52 weeks.</p></li>
<li><p>Diff: 52 week high - 52 week low</p></li>
<li><p>Distance: Closing Price - 200 MA value</p></li>
<li><p>200 Days Moving Average: A 200-day Moving Average (MA) is simply the average closing price of a stock over the last 200 days. They are used as trend indicators that reflect momentum in the price of the asset.</p></li>
</ol>
<p>Our system will generate a buy signal when all of the following conditions are satisfied:</p>
<ol type="1">
<li>(52 week low + diff * 0.2) &lt; stock price &lt; (52 week low + diff * 0.8)</li>
</ol>
<p>When stocks trade closer to their 52w high/low price and their prices start going up or down closer to their extreme values, there is a possibility that some news is driving the change and the fluctuation in price is not random, hence we avoid any stock trading outside these ranges i.e.&nbsp;we only consider stocks whose current price action is inside of the purple lines.</p>
<ol start="2" type="1">
<li>Stock Price &lt; 200 days MA</li>
</ol>
<p>This gives the stock a chance to correct itself, and revert to its mean value, which is higher than its current price.</p>
<ol start="3" type="1">
<li>Distance is in the top 5 percentile&nbsp;</li>
</ol>
<p>This will make sure that the deviation from mean value is significant and the stock price is expected to rise significantly.</p>
<p>Whereas, a sell signal is generated if</p>
<ol type="1">
<li><p>StopLoss is hit: There is a possibility that after buying a stock, the prices of stock might fall, in order to take this into account, we set a stoploss (maximum loss we’re willing to take before selling).</p></li>
<li><p>Profit Cap is reached: If, as anticipated, the prices start to rise then we have to decide at what point we want to sell the asset to capture the profit before the prices fall again. (Helps us to keep greed levels in check).</p></li>
</ol>
</section>
<section id="coding-the-strategy" class="level1">
<h1>Coding the Strategy</h1>


</section>

 ]]></description>
  <category>Finance</category>
  <category>Python</category>
  <guid>https://shubxam.codes/writings/2023-04-16-Mean-Reversion/index.html</guid>
  <pubDate>Sat, 15 Apr 2023 18:30:00 GMT</pubDate>
  <media:content url="https://shubxam.codes/writings/2023-04-16-Mean-Reversion/assets/preview_image.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Introduction to CAPM using Python</title>
  <dc:creator>Shubham Soni</dc:creator>
  <link>https://shubxam.codes/writings/2023-03-29-CAPM/index.html</link>
  <description><![CDATA[ 




<section id="introduction-to-capm" class="level2">
<h2 class="anchored" data-anchor-id="introduction-to-capm">Introduction to CAPM</h2>
<ul>
<li>The Capital Asset Pricing Model is a mathematical model used to estimate the expected return of an investment based on its risk level relative to the market.</li>
<li>Goal is to Check if stock is fairly valued taking into account its risk and time value of money.</li>
<li>He identified two types of risk
<ol type="1">
<li>systematic: Also called market risk. It is influenced by factors such as interest rates, inflation, recessions and geopolitical events like war. all assets are impacted in similar ways.</li>
<li>unsystematic: these are risks that are unique to each asset.</li>
</ol></li>
<li>The capital asset pricing model concentrates on measuring systemic risk and its impact on the value of an asset.</li>
<li>CAPM helps factor in systemic risks to estimate the fair value of an asset and understand the relationship between risk and expected returns.</li>
<li>Shows relationship between systematic risk and expected returns.</li>
<li>Based on beta, risk free rate, market risk premium.</li>
<li>Widely used for pricing risky securities because its simple and allows easy comparisons.</li>
<li>Used in conjuction with MPT to understand portfolio risk and expected returns.</li>
<li>The CAPM was developed in the early 1960s by Financial Economist William Sharpe who built his work on the ideas put forth by Harry Markowitz.</li>
</ul>
<section id="basic-theory" class="level3">
<h3 class="anchored" data-anchor-id="basic-theory">Basic Theory</h3>
<ul>
<li>Key Terms for CAPM
<ul>
<li>Expected Return: It is a well-grounded estimate of the returns an investor can expect over the life of an investment.</li>
<li>Risk Free Rate: The rate of return an investor would expect from an asset that bears no risk.
<ul>
<li>In india it is taken as the 10 year government bond yield since they are backed by the full faith and credit of the Indian Government.</li>
<li>As of Dec 23, 2022 it is 7.33%</li>
</ul></li>
<li>Beta: It quantifies the riskiness (volatility) of a stock compared with the market.
<ul>
<li>=1</li>
<li>&lt;1</li>
<li>&gt;1</li>
</ul></li>
<li>Market Risk Premium: Historical returns generated by a comparable market.</li>
</ul></li>
<li>Briefly put, the CAPM model generates the expected returns of assets given the risk of those assets. This is known as <strong>risk-adjusted</strong> expected return.</li>
<li>The formula is as follows:</li>
</ul>
<p><img src="https://latex.codecogs.com/png.latex?ER_i%20=%20Rf%20+%20%5Cbeta%20%5Ctimes%20%5BER_m%20-%20Rf%5D"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?ER_i"> = Expected Return of Asset</p>
<p><img src="https://latex.codecogs.com/png.latex?Rf"> = Risk Free rate is the rate of return of an asset with zero risk. In india it is taken as the 10 year government bond yield. 7.33%</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbeta"> = Beta Value of Stock. It quantifies the riskiness (volatility) of a stock compared with the market.</p>
<p><img src="https://latex.codecogs.com/png.latex?ER_m"> = market premium. Returns generated by market for given tenure.</p>
</section>
<section id="usecases" class="level3">
<h3 class="anchored" data-anchor-id="usecases">Usecases</h3>
<ul>
<li>Importance of beta of companies for investors</li>
<li>The CAPM plays a key role in financial modeling and asset valuation</li>
<li>While valuing a stock, an investor uses WACC to find NPV of future cash flows. CAPM is used to calculate cost of equity in calculation of WACC.</li>
<li>CAPM formula is still widely used because it is simple and allows for easy comparisons of investment alternatives.</li>
<li>Used as a tool combined with other methods of evaluating securities, it can play an integral role in helping investment professionals make informed investment decisions.</li>
<li>it is used in conjunction with modern portfolio theory (MPT) to understand portfolio risk and expected returns.</li>
</ul>
</section>
<section id="how-is-capm-useful-for-investors" class="level3">
<h3 class="anchored" data-anchor-id="how-is-capm-useful-for-investors">How is CAPM useful for Investors</h3>
</section>
<section id="shortfalls-limitations" class="level3">
<h3 class="anchored" data-anchor-id="shortfalls-limitations">Shortfalls (limitations)</h3>
<ul>
<li>Assumes that risk free rate remains constant. Over an analyst’s chosen investment time horizon, the risk-free rate can fluctuate</li>
</ul>
</section>
<section id="usual-doubts-related-to-capm" class="level3">
<h3 class="anchored" data-anchor-id="usual-doubts-related-to-capm">Usual Doubts related to CAPM</h3>
<ul>
<li><p>How it differentiates from other similar methods</p>
<ul>
<li>Arbitrage Pricing Theory a multi-factor model that looks at multiple factors, grouped into macroeconomic or company-specific factors.</li>
<li>FAMA French 3 Factor Model expands on CAPM by adding company-size risk and value risk factors to the market risk factors.</li>
</ul></li>
<li><p>Which one is better?</p></li>
<li><p>Disclaimer (Not a tip to buy selected stocks)</p></li>
</ul>
</section>
</section>
<section id="practical-example-in-indian-context-with-python-code-with-code-outputs" class="level2">
<h2 class="anchored" data-anchor-id="practical-example-in-indian-context-with-python-code-with-code-outputs">Practical Example (In Indian Context) with Python Code with code outputs</h2>
<section id="getting-data" class="level3">
<h3 class="anchored" data-anchor-id="getting-data">Getting Data</h3>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;">#importing required libraries</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> yfinance <span class="im" style="color: #00769E;">as</span> yf</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb1-9"></span>
<span id="cb1-10"><span class="im" style="color: #00769E;">import</span> plotly.express <span class="im" style="color: #00769E;">as</span> px</span>
<span id="cb1-11"></span>
<span id="cb1-12"><span class="im" style="color: #00769E;">from</span> sklearn.linear_model <span class="im" style="color: #00769E;">import</span> LinearRegression</span>
<span id="cb1-13"></span>
<span id="cb1-14"><span class="co" style="color: #5E5E5E;">#getting historic stock data from yfinance</span></span>
<span id="cb1-15">stocks_list <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'BHARTIARTL.NS'</span>, <span class="st" style="color: #20794D;">'ITC.NS'</span>, <span class="st" style="color: #20794D;">'HDFCBANK.NS'</span>,<span class="st" style="color: #20794D;">'^NSEI'</span>]</span>
<span id="cb1-16"></span>
<span id="cb1-17">data <span class="op" style="color: #5E5E5E;">=</span> yf.download(stocks_list, period<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'5y'</span>)[<span class="st" style="color: #20794D;">'Adj Close'</span>]</span>
<span id="cb1-18"></span>
<span id="cb1-19">data.columns <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'BHARTIARTL'</span>,<span class="st" style="color: #20794D;">'HDFCBANK'</span>, <span class="st" style="color: #20794D;">'ITC'</span>,<span class="st" style="color: #20794D;">'NIFTY_50'</span>]</span></code></pre></div>
</section>
<section id="eda-of-historic-data" class="level3">
<h3 class="anchored" data-anchor-id="eda-of-historic-data">EDA of historic Data</h3>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"></code></pre></div>
<section id="normalize-stock-prices-so-easy-to-compare" class="level4">
<h4 class="anchored" data-anchor-id="normalize-stock-prices-so-easy-to-compare">Normalize stock prices (so easy to compare)</h4>
<ul>
<li>Visualise all historic prices (normalized)</li>
</ul>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;">#Normalizing Stock Prices</span></span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="kw" style="color: #003B4F;">def</span> normalize_prices(df):</span>
<span id="cb3-4"></span>
<span id="cb3-5">&nbsp; &nbsp; df_ <span class="op" style="color: #5E5E5E;">=</span> df.copy()</span>
<span id="cb3-6"></span>
<span id="cb3-7">&nbsp; &nbsp; <span class="cf" style="color: #003B4F;">for</span> stock <span class="kw" style="color: #003B4F;">in</span> df_.columns:</span>
<span id="cb3-8"></span>
<span id="cb3-9">&nbsp; &nbsp; &nbsp; &nbsp; df_[stock] <span class="op" style="color: #5E5E5E;">=</span> df_[stock]<span class="op" style="color: #5E5E5E;">/</span>df_[stock][<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb3-10"></span>
<span id="cb3-11">&nbsp; &nbsp; <span class="cf" style="color: #003B4F;">return</span> df_</span>
<span id="cb3-12"></span>
<span id="cb3-13">norm_df <span class="op" style="color: #5E5E5E;">=</span> normalize_prices(data)</span>
<span id="cb3-14"></span>
<span id="cb3-15"><span class="co" style="color: #5E5E5E;"># Plotting the normalized stock prices </span></span>
<span id="cb3-16"></span>
<span id="cb3-17">fig <span class="op" style="color: #5E5E5E;">=</span> px.line(title <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"Normalized stock prices"</span>)</span>
<span id="cb3-18"></span>
<span id="cb3-19"><span class="cf" style="color: #003B4F;">for</span> stock <span class="kw" style="color: #003B4F;">in</span> norm_df.columns:</span>
<span id="cb3-20"></span>
<span id="cb3-21">&nbsp; &nbsp; fig.add_scatter(x <span class="op" style="color: #5E5E5E;">=</span> norm_df.index.values, y <span class="op" style="color: #5E5E5E;">=</span> norm_df[stock], name <span class="op" style="color: #5E5E5E;">=</span> stock)</span>
<span id="cb3-22"></span>
<span id="cb3-23">fig.show()</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://shubxam.codes/writings/2023-03-29-CAPM/assets/newplot.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Chart-1</figcaption><p></p>
</figure>
</div>
</section>
<section id="calculating-daily-returns" class="level4">
<h4 class="anchored" data-anchor-id="calculating-daily-returns">Calculating Daily Returns (%)</h4>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;"># Calculating Daily % change in stock prices</span></span>
<span id="cb4-2"></span>
<span id="cb4-3">daily_returns <span class="op" style="color: #5E5E5E;">=</span> norm_df.pct_change()</span>
<span id="cb4-4"></span>
<span id="cb4-5">daily_returns.iloc[<span class="dv" style="color: #AD0000;">0</span>,:] <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb4-6"></span>
<span id="cb4-7"><span class="co" style="color: #5E5E5E;"># Boxplot of daily returns (in %)</span></span>
<span id="cb4-8"></span>
<span id="cb4-9">daily_returns.boxplot(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">5</span>), grid<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span>
<span id="cb4-10"></span>
<span id="cb4-11">plt.title(<span class="st" style="color: #20794D;">"Daily returns of the stocks"</span>)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://shubxam.codes/writings/2023-03-29-CAPM/assets/plot-2.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">plot-2</figcaption><p></p>
</figure>
</div>
</section>
<section id="interpreting-the-results" class="level4">
<h4 class="anchored" data-anchor-id="interpreting-the-results">Interpreting the results</h4>
</section>
</section>
<section id="capm-model" class="level3">
<h3 class="anchored" data-anchor-id="capm-model">CAPM Model</h3>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;"># Initializing empty dictionaries to save results</span></span>
<span id="cb5-2"></span>
<span id="cb5-3">beta,alpha <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">dict</span>(), <span class="bu" style="color: null;">dict</span>()</span>
<span id="cb5-4"></span>
<span id="cb5-5"><span class="co" style="color: #5E5E5E;"># Make a nice subplot</span></span>
<span id="cb5-6"></span>
<span id="cb5-7">fig, axes <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">3</span>, dpi<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">150</span>, figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">15</span>,<span class="dv" style="color: #AD0000;">8</span>))</span>
<span id="cb5-8"></span>
<span id="cb5-9">axes <span class="op" style="color: #5E5E5E;">=</span> axes.flatten()</span>
<span id="cb5-10"></span>
<span id="cb5-11"><span class="co" style="color: #5E5E5E;"># Loop on every stock daily return</span></span>
<span id="cb5-12"></span>
<span id="cb5-13"><span class="cf" style="color: #003B4F;">for</span> idx, stock <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(daily_returns.columns.values[:<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>]):</span>
<span id="cb5-14"></span>
<span id="cb5-15">&nbsp; &nbsp; <span class="co" style="color: #5E5E5E;"># scatter plot between stocks and the NSE</span></span>
<span id="cb5-16"></span>
<span id="cb5-17">&nbsp; &nbsp; daily_returns.plot(kind <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"scatter"</span>, x <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"NIFTY_50"</span>, y <span class="op" style="color: #5E5E5E;">=</span> stock, ax<span class="op" style="color: #5E5E5E;">=</span>axes[idx])</span>
<span id="cb5-18"></span>
<span id="cb5-19">&nbsp; &nbsp; <span class="co" style="color: #5E5E5E;"># Fit a line (regression using polyfit of degree 1)</span></span>
<span id="cb5-20"></span>
<span id="cb5-21">&nbsp; &nbsp; b_, a_ <span class="op" style="color: #5E5E5E;">=</span> np.polyfit(daily_returns[<span class="st" style="color: #20794D;">"NIFTY_50"</span>] ,daily_returns[stock], <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb5-22"></span>
<span id="cb5-23">&nbsp; &nbsp; regression_line <span class="op" style="color: #5E5E5E;">=</span> b_ <span class="op" style="color: #5E5E5E;">*</span> daily_returns[<span class="st" style="color: #20794D;">"NIFTY_50"</span>] <span class="op" style="color: #5E5E5E;">+</span> a_</span>
<span id="cb5-24"></span>
<span id="cb5-25">&nbsp; &nbsp; axes[idx].plot(daily_returns[<span class="st" style="color: #20794D;">"NIFTY_50"</span>], regression_line, <span class="st" style="color: #20794D;">"-"</span>, color <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"r"</span>)</span>
<span id="cb5-26"></span>
<span id="cb5-27">&nbsp; &nbsp; <span class="co" style="color: #5E5E5E;"># save the regression coeeficient for the current stock</span></span>
<span id="cb5-28"></span>
<span id="cb5-29">&nbsp; &nbsp; beta[stock] <span class="op" style="color: #5E5E5E;">=</span> b_</span>
<span id="cb5-30"></span>
<span id="cb5-31">&nbsp; &nbsp; alpha[stock] <span class="op" style="color: #5E5E5E;">=</span> a_</span>
<span id="cb5-32"></span>
<span id="cb5-33">plt.suptitle(<span class="st" style="color: #20794D;">"Beta estimation: regression between NIFTY_50 and individual stock daily performance"</span>, size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">20</span>)</span>
<span id="cb5-34"></span>
<span id="cb5-35">plt.show()</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://shubxam.codes/writings/2023-03-29-CAPM/assets/plot-3.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">plot-3</figcaption><p></p>
</figure>
</div>
<p>The plot generated by the code is a scatterplot with a linear regression line superimposed on top of it. The scatterplot shows the relationship between the daily returns of the NIFTY_50 index and the daily returns of an individual stock. The regression line shows the overall trend in this relationship.</p>
<p>By looking at the slope of the regression line, you can determine the beta of the individual stock. Beta is a measure of a stock’s volatility in relation to the overall market. A beta of 1 means that the stock’s price moves in line with the market, while a beta less than 1 means that it is less volatile than the market, and a beta greater than 1 means that it is more volatile.</p>
<p>You can also determine the alpha of the individual stock from the intercept of the regression line. Alpha is a measure of the stock’s performance relative to the market. A positive alpha indicates that the stock has outperformed the market, while a negative alpha indicates that it has underperformed the market.</p>
<p>You can use the beta and alpha values to compare the relative risk and return of different stocks, and to make informed investment decisions.</p>
<section id="calculating-beta" class="level4">
<h4 class="anchored" data-anchor-id="calculating-beta">Calculating Beta</h4>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">keys <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">list</span>(beta.keys())</span>
<span id="cb6-2">beta_3 <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">dict</span>()</span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="cf" style="color: #003B4F;">for</span> k <span class="kw" style="color: #003B4F;">in</span> keys:</span>
<span id="cb6-5"></span>
<span id="cb6-6">&nbsp; &nbsp; beta_3[k] <span class="op" style="color: #5E5E5E;">=</span> [daily_returns[[k,<span class="st" style="color: #20794D;">'NIFTY_50'</span>]].cov()<span class="op" style="color: #5E5E5E;">/</span>daily_returns[<span class="st" style="color: #20794D;">'NIFTY_50'</span>].var()][<span class="dv" style="color: #AD0000;">0</span>].iloc[<span class="dv" style="color: #AD0000;">0</span>,<span class="dv" style="color: #AD0000;">1</span>]</span></code></pre></div>
<ul>
<li>Explaining beta in terms of Regression between market and stock</li>
<li>Visualize the regression line #### calculate expected return of stock prices with actual historic returns</li>
</ul>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;"># Initialize the expected return dictionary</span></span>
<span id="cb7-2"></span>
<span id="cb7-3">ER <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">dict</span>()</span>
<span id="cb7-4"></span>
<span id="cb7-5">rf <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.0733</span></span>
<span id="cb7-6"></span>
<span id="cb7-7">trading_days <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">250</span></span>
<span id="cb7-8"></span>
<span id="cb7-9"><span class="co" style="color: #5E5E5E;"># Estimate the expected return of the market using the daily returns</span></span>
<span id="cb7-10"></span>
<span id="cb7-11">rm <span class="op" style="color: #5E5E5E;">=</span> daily_returns[<span class="st" style="color: #20794D;">"NIFTY_50"</span>].mean() <span class="op" style="color: #5E5E5E;">*</span> trading_days</span>
<span id="cb7-12"></span>
<span id="cb7-13"><span class="cf" style="color: #003B4F;">for</span> k <span class="kw" style="color: #003B4F;">in</span> keys:</span>
<span id="cb7-14"></span>
<span id="cb7-15">&nbsp; &nbsp; <span class="co" style="color: #5E5E5E;"># Calculate return for every security using CAPM</span></span>
<span id="cb7-16"></span>
<span id="cb7-17">&nbsp; &nbsp; ER[k] <span class="op" style="color: #5E5E5E;">=</span> rf <span class="op" style="color: #5E5E5E;">+</span> beta[k] <span class="op" style="color: #5E5E5E;">*</span> (rm<span class="op" style="color: #5E5E5E;">-</span>rf)</span>
<span id="cb7-18"></span>
<span id="cb7-19"><span class="cf" style="color: #003B4F;">for</span> k <span class="kw" style="color: #003B4F;">in</span> keys:</span>
<span id="cb7-20"></span>
<span id="cb7-21">&nbsp; &nbsp; <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Expected return based on CAPM model for </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;"> is </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">%"</span>.<span class="bu" style="color: null;">format</span>(k, <span class="bu" style="color: null;">round</span>(ER[k]<span class="op" style="color: #5E5E5E;">*</span><span class="dv" style="color: #AD0000;">100</span>, <span class="dv" style="color: #AD0000;">2</span>)))</span>
<span id="cb7-22"></span>
<span id="cb7-23"><span class="co" style="color: #5E5E5E;"># Calculating historic returns</span></span>
<span id="cb7-24"></span>
<span id="cb7-25"><span class="cf" style="color: #003B4F;">for</span> k <span class="kw" style="color: #003B4F;">in</span> keys:</span>
<span id="cb7-26"></span>
<span id="cb7-27">&nbsp; &nbsp; <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Return based on historical data for </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;"> is </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">%'</span>.<span class="bu" style="color: null;">format</span>(k, <span class="bu" style="color: null;">round</span>(daily_returns[k].mean() <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span> <span class="op" style="color: #5E5E5E;">*</span> trading_days, <span class="dv" style="color: #AD0000;">2</span>)))</span></code></pre></div>
<p><img src="https://shubxam.codes/writings/2023-03-29-CAPM/assets/returns-1.png" title="returns 01" class="img-fluid"></p>
<p><img src="https://shubxam.codes/writings/2023-03-29-CAPM/assets/returns-2.png" title="returns 02" class="img-fluid"></p>
</section>
</section>
<section id="conslusion" class="level3">
<h3 class="anchored" data-anchor-id="conslusion">Conslusion</h3>
<ul>
<li>The CAPM uses the principles of modern portfolio theory to determine if a security is fairly valued.</li>
<li>It relies on assumptions about investor behaviors, risk and return distributions, and market fundamentals that don’t match reality.</li>
<li>However, the underlying concepts of CAPM and the associated efficient frontier can help investors understand the relationship between expected risk and reward as they strive to make better decisions about adding securities to a portfolio.</li>
</ul>


</section>
</section>

 ]]></description>
  <category>Finance</category>
  <category>Python</category>
  <guid>https://shubxam.codes/writings/2023-03-29-CAPM/index.html</guid>
  <pubDate>Tue, 28 Mar 2023 18:30:00 GMT</pubDate>
  <media:content url="https://shubxam.codes/writings/2023-03-29-CAPM/assets/preview_image.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
