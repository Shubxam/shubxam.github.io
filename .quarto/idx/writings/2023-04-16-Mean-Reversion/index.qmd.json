{"title":"Mean Reversion Theory using Python","markdown":{"yaml":{"title":"Mean Reversion Theory using Python","description":"What is Mean Reversion Strategy and How do we implement it using Python.","author":[{"name":"Shubham Soni","url":"https://shubxam.github.io/"}],"date":"04-16-2023","categories":["Finance","Python"],"image":"./assets/preview_image.jpg","date-modified":"03-29-2023","jupyter":"python3"},"headingText":"Mean Reversion Strategy in Python","containsRefs":false,"markdown":"\n\n\n\n# Introduction\n\nMean reversion is a popular trading strategy used in the financial market to take advantage of the tendency of an asset's price to move back to its mean or average price over time. This strategy uses statistical analysis and mathematical models to identify opportunities to buy low and sell high, thereby maximizing profits. Python, a powerful and versatile programming language, has become the go-to tool for data analysis and computational finance due to its simplicity, speed, and a rich library of modules and packages. In this article, we will explore how to implement a mean reversion trading strategy using Python, from data collection and analysis to backtesting and execution. Whether you're a seasoned trader or just starting out, this guide will provide you with the knowledge and skills to build and refine your own mean reversion trading strategy in Python.\n\n\n# What is Mean Reversion\n\nMean reversion is a widely used trading strategy that is based on the assumption that the price of an asset will tend to move back towards its average price over time. This strategy involves buying an asset when its price is lower than its mean, and selling it when its price is higher. In this way, traders can take advantage of the market inefficiencies and generate profits. At its core, mean reversion traders look for strong price movements and then try to identify when those prices are likely to reverse. The way to apply this strategy in the market is to seek out extreme events and then bet that things will revert back to nearer the average.\n\n\n## Drawbacks of using Mean Reversion\n\nMain problems that traders face when using mean reversion strategy:\n\n1.  If a stock is dropped for a major reason; such as a structural change or if there’s real game changing news, the chances of that stock snapping back quickly and giving you a profit is much smaller.\n\n2.  Momentum is the enemy of this strategy.\n\n3.  Strong price movements can go on for a very long time and a reversal may not occur for a long period\n\n4.  Instead of the price reversing and meeting the moving average again, often price just consolidates after a strong move and the moving catches up with the price\n\n# Designing the Strategy\n\nIn order to design our trading strategy, we will consider 200 Days moving average as the guiding principle. If we take Bharti Airtel stock (NSE:BHARTIARTL) as a reference and look at its price action over the last 1 year, we see that whenever the stock price deviates from its long-term average value, sooner or later it reverts back to the long term mean value.\n\nThe graph below shows the mean reversion action. Here the blue line represents daily price action and orange line represents the 200 days moving average\n\nMost retail traders/investors in India do not usually short a stock simply because they do not understand the complexities associated with short selling, hence our main focus while designing this trading strategy will be on buying low and selling high. \n\nThere are numerous other ways in which mean reversion theory could be applied in trading, either independently or in conjunction with other trading strategies however since the scope of this article is limited to the introduction of Mean reversion as a trading strategy, we will keep our strategy simple.\n\nLet's understand key terminologies that we will be using in the code before we start making our trading system:\n\n1.  52 week low: lowest price a stock has traded at, in the past 52 weeks.\n\n2.  52 week high: The highest price a stock has traded at, in the past 52 weeks.\n\n3.  Diff: 52 week high - 52 week low\n\n4.  Distance: Closing Price - 200 MA value\n\n5.  200 Days Moving Average: A 200-day Moving Average (MA) is simply the average closing price of a stock over the last 200 days. They are used as trend indicators that reflect momentum in the price of the asset.\n\n\n\n\nOur system will generate a buy signal when all of the following conditions are satisfied:\n\n1.  (52 week low + diff * 0.2) < stock price < (52 week low + diff * 0.8)\n\n\nWhen stocks trade closer to their 52w high/low price and their prices start going up or down closer to their extreme values, there is a possibility that some news is driving the change and the fluctuation in price is not random, hence we avoid any stock trading outside these ranges i.e. we only consider stocks whose current price action is inside of the purple lines.\n\n2.  Stock Price < 200 days MA\n\n\nThis gives the stock a chance to correct itself, and revert to its mean value, which is higher than its current price.\n\n3.  Distance is in the top 5 percentile \n\n\nThis will make sure that the deviation from mean value is significant and the stock price is expected to rise significantly.\n\n\n\nWhereas, a sell signal is generated if\n\n1.  StopLoss is hit: There is a possibility that after buying a stock, the prices of stock might fall, in order to take this into account, we set a stoploss (maximum loss we’re willing to take before selling).\n\n2.  Profit Cap is reached: If, as anticipated, the prices start to rise then we have to decide at what point we want to sell the asset to capture the profit before the prices fall again. (Helps us to keep greed levels in check).\n\n\n# Coding the Strategy\n\n## Libraries imports\n\n```{python}\n#| label: imports\n#| eval: true\n\nimport pandas as pd\nimport yfinance as yf\n\n```\n\n## Data Sources\n\n- We get the NIFTY 50 universe data (tickers) from nifty’s own website.\n\n\n```{python}\n#| label: data-fetch\n#| eval: true\n# NIFTY 50 Universe\n\nnifty_50_ticker_url = 'https://www.niftyindices.com/IndexConstituent/ind_nifty50list.csv'\n\nnifty_50 = pd.read_csv(nifty_50_ticker_url)\n\n```\n\n- Now that we have the tickers list available, we get the historical data for the tickers from a python library called yfinance.\n\n```{python}\n#| eval: true\n# Downloading historic data from yfinance\n\nhistoric_price = yf.download(\n    (nifty_50.Symbol + '.NS').to_list(), progress=True)['Adj Close']\n```\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"output-file":"index.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.475","theme":{"dark":"cyborg","light":"lux"},"monofont":"JetBrains Mono","title-block-banner":true,"title":"Mean Reversion Theory using Python","description":"What is Mean Reversion Strategy and How do we implement it using Python.","author":[{"name":"Shubham Soni","url":"https://shubxam.github.io/"}],"date":"04-16-2023","categories":["Finance","Python"],"image":"./assets/preview_image.jpg","date-modified":"03-29-2023","jupyter":"python3"},"extensions":{"book":{"multiFile":true}}}}}